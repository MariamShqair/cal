{"version":3,"sources":["logo.svg","serviceWorker.js","index.js","App.js"],"names":["module","exports","__webpack_require__","p","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","state","value","handleDeleteAllElement","_this","setState","handleDeleteOneElement","car","slice","evaluateFirstSolution","param","eval","params","this","_this2","console","log","react__WEBPACK_IMPORTED_MODULE_5___default","className","type","id","name","placeholder","onClick","handleClick","Component"],"mappings":"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","file":"static/js/main.c0ec4eeb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    value: \"\"\n};\n\n\nhandleClick(params) { \n    this.setState({value:this.state.value+params})\n}\n\nhandleDeleteAllElement =()=>{\n    this.setState({value:\"\"})\n}\nhandleDeleteOneElement = ()=>{\n    \n    let value =  this.state.value;\n    let car =    value.slice(0, -1);\n    this.setState({value:car})\n}\nevaluateFirstSolution=(param)=> {\n    \n    let value = eval(this.state.value)\n    this.setState({value})\n}\nrender() {\n    console.log(this.state.value)\n    return (\n        <div className=\"body\">\n            <h1>CALCULATOR</h1>\n            <input\n                type=\"text\"\n                id=\"fname\"\n                name=\"firstname\"\n                placeholder={this.state.value}\n                value={this.state.value}\n                />\n            <div className=\"box\">\n                <div className=\"number\">\n                    <ul>\n                        <li>\n                            \n                            <h5>\n\n                                <a onClick={ () => this.handleClick(\"1\")}>1</a>\n                            </h5>\n                        </li>\n                        <li>\n                            <h5>\n                                <a onClick={() => this.handleClick(\"2\")}>2</a>\n                            </h5>\n                        </li>\n                        <li>\n                            <h5>\n                                <a onClick={() => this.handleClick(\"3\")}>3</a>\n                            </h5>\n                        </li>\n                    </ul>\n                    <ul>\n                        <li>\n                            <h5>\n                                <a onClick={() => this.handleClick(\"4\")}>4</a>\n                            </h5>\n                        </li>\n                        <li>\n                            <h5>\n                                <a onClick={() => this.handleClick(\"5\")}>5</a>\n                            </h5>\n                        </li>\n                        <li>\n                            <h5>\n                                <a onClick={() => this.handleClick(\"6\")}>6</a>\n                            </h5>\n                        </li>\n                    </ul>\n                    <ul>\n                        <li>\n                            <h5>\n                                <a onClick={() => this.handleClick(\"7\")}>7</a>\n                            </h5>\n                        </li>\n                        <li>\n                            <h5>\n                                <a onClick={() => this.handleClick(\"8\")}>8</a>\n                            </h5>\n                        </li>\n                        <li>\n                            <h5>\n                                <a onClick={() => this.handleClick(\"9\")}>9</a>\n                            </h5>\n                        </li>\n                    </ul>\n                    <ul>\n                        <li>\n                            <h5>\n                                <a onClick={() => this.handleClick('.')}>.</a>\n                            </h5>\n                        </li>\n                        <li>\n                            <h5>\n                                <a onClick={() => this.handleClick(\"0\")}>0</a>\n                            </h5>\n                        </li>\n                    </ul>\n                </div>\n                <div className=\"operator\">\n                    <ul>\n                        <li>\n                            <h5>\n                                <a onClick={() => this.handleDeleteOneElement('C')}>C</a>\n                            </h5>\n                        </li>\n                        <li>\n                            <h5>\n                                <a onClick={() => this.handleDeleteAllElement('CC')}>CC</a>\n                            </h5>\n                        </li>\n                    </ul>\n                    <ul>\n                        <li>\n                            <h5>\n                                <a onClick={() => this.handleClick('+')}>+</a>\n                            </h5>\n                        </li>\n                        <li>\n                            <h5>\n                                <a onClick={() => this.handleClick('-')}>-</a>\n                            </h5>\n                        </li>\n                    </ul>\n                    <ul>\n                        <li>\n                            <h5>\n\n                                <a onClick={() => this.handleClick('/')}>/</a>\n                            </h5>\n                        </li>\n                        <li>\n                            <h5>\n                                <a onClick={() => this.handleClick('*')}>*</a>\n                            </h5>\n                        </li>\n                    </ul>\n                    <ul>\n                        <li>\n                            <h5>\n                                <a onClick={() => this.evaluateFirstSolution('=')}>=</a>\n                            </h5>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    );\n}\n}\nexport default  App;"],"sourceRoot":""}